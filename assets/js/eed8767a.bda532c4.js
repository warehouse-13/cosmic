"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3304:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"Set up the management cluster"},o=void 0,l={unversionedId:"build-guide/management-cluster",id:"build-guide/management-cluster",title:"Set up the management cluster",description:"The rest of this will be run from your admin machine. This can be macOS or Linux,",source:"@site/docs/build-guide/management-cluster.md",sourceDirName:"build-guide",slug:"/build-guide/management-cluster",permalink:"/cosmic/docs/build-guide/management-cluster",draft:!1,editUrl:"https://github.com/warehouse-13/cosmic/tree/main/docs/build-guide/management-cluster.md",tags:[],version:"current",frontMatter:{title:"Set up the management cluster"},sidebar:"docs",previous:{title:"Check the environment",permalink:"/cosmic/docs/build-guide/check-env"},next:{title:"Create the Pi cluster",permalink:"/cosmic/docs/build-guide/mvm-cluster"}},s={},c=[{value:"Kind",id:"kind",level:2},{value:"CAPI and CAPMVM",id:"capi-and-capmvm",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The rest of this will be run from your ",(0,a.kt)("strong",{parentName:"p"},"admin machine"),". This can be macOS or Linux,\nbasically wherever you can run docker (although I have not tested on Windows, should be fine tho)."),(0,a.kt)("h2",{id:"kind"},"Kind"),(0,a.kt)("p",null,"The Pi cluster will be created by ",(0,a.kt)("a",{parentName:"p",href:"https://cluster-api.sigs.k8s.io/"},"CAPI"),". We'll have the management cluster\non your admin machine. You can use a more permanent cluster if you like, but\nhere I am just using ",(0,a.kt)("inlineCode",{parentName:"p"},"kind"),"."),(0,a.kt)("p",null,"Install ",(0,a.kt)("a",{parentName:"p",href:"https://kind.sigs.k8s.io/"},"kind"),", ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"docker")," and ",(0,a.kt)("a",{parentName:"p",href:"https://cluster-api.sigs.k8s.io/user/quick-start.html#install-clusterctl"},"clusterctl"),"."),(0,a.kt)("p",null,"Create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"kind")," cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kind create cluster --name lm-lab-manage\n")),(0,a.kt)("h2",{id:"capi-and-capmvm"},"CAPI and CAPMVM"),(0,a.kt)("p",null,"The Liquid Metal infra provider is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/weaveworks-liquidmetal/cluster-api-provider-microvm"},"Cluster API Provider MicroVM (CAPMVM)"),"."),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"cluster-api")," directory under home:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p ~/.cluster-api\n")),(0,a.kt)("p",null,"Set the CAPMVM version in your environment. First ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/weaveworks-liquidmetal/cluster-api-provider-microvm/blob/main/docs/compatibility.md"},"check for the\nversion which is compatible")," with the version of ",(0,a.kt)("inlineCode",{parentName:"p"},"flintlockd")," your boards are running.\nIn my case I am using Flintlock ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.4.0"),", so the latest compatible CAPMVM version is ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.7.0"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export CAPMVM_VERSION=v0.7.0\n")),(0,a.kt)("p",null,"Write the installation information to a ",(0,a.kt)("inlineCode",{parentName:"p"},"clusterctl")," config file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"cluster-api"),"\nrepo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'cat << EOF >>~/.cluster-api/clusterctl.yaml\nproviders:\n  - name: "microvm"\n    url: "https://github.com/weaveworks-liquidmetal/cluster-api-provider-microvm/releases/$CAPMVM_VERSION/infrastructure-components.yaml"\n    type: "InfrastructureProvider"\nEOF\n')),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"clusterctl")," to initialise the management cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export EXP_CLUSTER_RESOURCE_SET=true # required for the CNI addon we want deployed to the MicroVM cluster\n\nclusterctl init --infrastructure microvm\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Fetching providers\nInstalling cert-manager Version="v1.5.3"\nWaiting for cert-manager to be available...\nInstalling Provider="cluster-api" Version="v1.2.2" TargetNamespace="capi-system"\nInstalling Provider="bootstrap-kubeadm" Version="v1.2.2" TargetNamespace="capi-kubeadm-bootstrap-system"\nI0927 13:51:15.765771  815920 request.go:665] Waited for 1.023726916s due to client-side throttling, not priority and fairness, request: GET:https://127.0.0.1:38035/apis/bootstrap.cluster.x-k8s.io/v1beta1?timeout=30s\nInstalling Provider="control-plane-kubeadm" Version="v1.2.2" TargetNamespace="capi-kubeadm-control-plane-system"\nInstalling Provider="infrastructure-microvm" Version="v0.8.0" TargetNamespace="capmvm-system"\n\nYour management cluster has been initialized successfully!\n\nYou can now create your first workload cluster by running the following:\n\n  clusterctl generate cluster [name] --kubernetes-version [version] | kubectl apply -f -\n'))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you see an error containing the words ",(0,a.kt)("inlineCode",{parentName:"p"},'"401 Bad Credentials"'),", make sure you don't\nhave any Github auth methods set in your environment. ",(0,a.kt)("inlineCode",{parentName:"p"},"GITHUB_TOKEN")," is a common\nculprit and can be removed with ",(0,a.kt)("inlineCode",{parentName:"p"},"unset GITHUB_TOKEN"),".")))}p.isMDXComponent=!0}}]);