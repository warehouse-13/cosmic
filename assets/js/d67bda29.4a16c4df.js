"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[900],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(h,a(a({ref:t},p),{},{components:n})):o.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const r={title:"Bootstrap the hosts"},a=void 0,l={unversionedId:"build-guide/host-bootstrapping",id:"build-guide/host-bootstrapping",title:"Bootstrap the hosts",description:"The Raspberry Pi boards will be bootstrapped to run MicroVMs.",source:"@site/docs/build-guide/host-bootstrapping.md",sourceDirName:"build-guide",slug:"/build-guide/host-bootstrapping",permalink:"/cosmic/docs/build-guide/host-bootstrapping",draft:!1,editUrl:"https://github.com/warehouse-13/cosmic/tree/main/docs/build-guide/host-bootstrapping.md",tags:[],version:"current",frontMatter:{title:"Bootstrap the hosts"},sidebar:"docs",previous:{title:"Prep the boards",permalink:"/cosmic/docs/build-guide/board-setup"},next:{title:"Check the environment",permalink:"/cosmic/docs/build-guide/check-env"}},s={},c=[{value:"Components/setup TL;DR:",id:"componentssetup-tldr",level:2},{value:"Install",id:"install",level:2},{value:"Optional: VLAN",id:"optional-vlan",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Raspberry Pi boards will be bootstrapped to run MicroVMs.\nFor more info on each component check out the ",(0,i.kt)("a",{parentName:"p",href:"https://weaveworks-liquidmetal.github.io/site/"},"Liquid Metal docs site"),"."),(0,i.kt)("h2",{id:"componentssetup-tldr"},"Components/setup TL;DR:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flintlock")," is the entrypoint API for creating MicroVMs. It wraps firecracker\nand containerd to provide a usable management experience."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Firecracker")," is what will actually start MicroVMs as processes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Containerd")," is used to provide root volumes and kernel binaries (from snapshots of images)\nto the MicroVMs, as well as to store state."),(0,i.kt)("li",{parentName:"ul"},"Containerd uses ",(0,i.kt)("strong",{parentName:"li"},"devicemapper")," to store images and snapshots. In this build I\nam using a development setup with ",(0,i.kt)("strong",{parentName:"li"},"thinpool")," storage. If you have spare disks (as in additional to any boot disk)\nfor each board, you ",(0,i.kt)("em",{parentName:"li"},"could")," skip the ",(0,i.kt)("inlineCode",{parentName:"li"},"--dev")," flag in the command below."),(0,i.kt)("li",{parentName:"ul"},"Each MicroVM is created with 2 network interfaces. One of those is a ",(0,i.kt)("strong",{parentName:"li"},"macvtap"),"\ninterface in bridge mode which gives the MicroVM its network access. This is something\nneeds to be enabled in the host kernel. (Flintlock also allows for a standard bridge/tap\nsetup, but we are going with ",(0,i.kt)("inlineCode",{parentName:"li"},"macvtap")," here.)")),(0,i.kt)("h2",{id:"install"},"Install"),(0,i.kt)("p",null,"Check that KVM is enabled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt install cpu-checker\n\nkvm-ok\n# INFO: /dev/kvm exists\n# KVM acceleration can be used\n")),(0,i.kt)("p",null,"Load the ",(0,i.kt)("inlineCode",{parentName:"p"},"macvlan")," (",(0,i.kt)("inlineCode",{parentName:"p"},"macvtap"),") module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"modprobe macvlan\nlsmod | grep macvlan\n# macvlan                36864  1 macvtap\n")),(0,i.kt)("p",null,"If you don't have the module (likely on ubuntu 22.04), install extra linux modules for pi:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install linux-modules-extra-raspi\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"modprobe macvlan")," errors with"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"modprobe: FATAL: Module macvlan not found in directory /lib/modules/5.15.0-1015-raspi\n")),(0,i.kt)("p",{parentName:"admonition"},"reboot the Pi and try again afterwards.")),(0,i.kt)("p",null,"We will use a script to bootstrap the rest. Download it onto each board:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/weaveworks-liquidmetal/flintlock/main/hack/scripts/provision.sh\nchmod +x provision.sh\n")),(0,i.kt)("p",null,"Run the script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo ./provision.sh all -y \\\n  --dev \\\n  --insecure \\\n  --grpc-address 0.0.0.0:9090\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"For this we are not setting up the flintlock server with any sort of auth.\nSince it is running on your LAN this is not really a problem, but you can add some\ncerts if you want later. Check out the ",(0,i.kt)("a",{parentName:"p",href:"https://weaveworks-liquidmetal.github.io/site/docs/guides/authn/"},"flintlock security docs")," for instructions.")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"[flintlock provision.sh] 2022-10-18 16:03:27 UTC: Provisioning host rp1\n[flintlock provision.sh] The following subcommands will be performed: apt, firecracker, containerd, flintlock, direct_lvm|devpool\n[flintlock provision.sh] Will install binaries for architecture: arm64\n[flintlock provision.sh] Installing required apt packages\n...\n[flintlock provision.sh] Packages installed\n[flintlock provision.sh] Creating containerd directory /var/lib/containerd-dev/snapshotter/devmapper\n[flintlock provision.sh] Creating containerd directory /run/containerd-dev\n[flintlock provision.sh] Creating containerd directory /etc/containerd\n[flintlock provision.sh] All containerd directories created\n[flintlock provision.sh] Will create loop-back thinpool flintlock-dev-thinpool\n[flintlock provision.sh] Creating sparse file /var/lib/containerd-dev/snapshotter/devmapper/data of size 100G\n[flintlock provision.sh] Sparse file /var/lib/containerd-dev/snapshotter/devmapper/data created\n[flintlock provision.sh] Creating sparse file /var/lib/containerd-dev/snapshotter/devmapper/metadata of size 10G\n[flintlock provision.sh] Sparse file /var/lib/containerd-dev/snapshotter/devmapper/metadata created\n[flintlock provision.sh] Associating loop devices with sparse files\n[flintlock provision.sh] Loop devices /dev/loop13 and /dev/loop14 associated\n[flintlock provision.sh] Creating thinpool flintlock-dev-thinpool with devices /dev/loop13 and /dev/loop14\n[flintlock provision.sh] Thinpool flintlock-dev-thinpool created\n[flintlock provision.sh] Dev thinpool creation complete\n[flintlock provision.sh] Installing firecracker version latest to /usr/local/bin\n[flintlock provision.sh] Firecracker version v1.1.1-macvtap successfully installed\n[flintlock provision.sh] Installing containerd version latest to /usr/local/bin\n[flintlock provision.sh] Containerd version v1.6.8 successfully installed\n[flintlock provision.sh] Writing containerd config to /etc/containerd/config-dev.toml\n[flintlock provision.sh] Containerd config saved\n[flintlock provision.sh] Starting containerd service with /etc/systemd/system/containerd-dev.service\n[flintlock provision.sh] Containerd running\n[flintlock provision.sh] Installing flintlockd version latest to /usr/local/bin\n[flintlock provision.sh] Flintlockd version v0.4.0 successfully installed\n[flintlock provision.sh] Writing flintlockd config to /etc/opt/flintlockd/config.yaml.\n[flintlock provision.sh] Flintlockd config saved\n[flintlock provision.sh] Starting flintlockd service with /etc/systemd/system/flintlockd.service\n[flintlock provision.sh] Flintlockd running at 0.0.0.0:9090 via interface eth0\n[flintlock provision.sh] 2022-10-18 16:04:22 UTC: Host rp1 provisioned\n"))),(0,i.kt)("h2",{id:"optional-vlan"},"Optional: VLAN"),(0,i.kt)("p",null,"The above instructions give you the most basic setup. If you want more control\nand observability of the network that the MicroVMs are created in, you can ",(0,i.kt)("a",{parentName:"p",href:"/docs/build-guide/demo-build"},"copy my\n",(0,i.kt)("em",{parentName:"a"},"exact")," demo setup and create a VLAN"),"."))}d.isMDXComponent=!0}}]);